// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: spec/api.proto

package gen

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on WriteRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *WriteRequest) Validate() error {
	if m == nil {
		return nil
	}

	if _, ok := _WriteRequest_ServiceId_InLookup[m.GetServiceId()]; !ok {
		return WriteRequestValidationError{
			field:  "ServiceId",
			reason: "value must be in list [default containers databases]",
		}
	}

	if m.GetGroupId() != "" {

		if len(m.GetGroupId()) > 84 {
			return WriteRequestValidationError{
				field:  "GroupId",
				reason: "value length must be at most 84 bytes",
			}
		}

		if !_WriteRequest_GroupId_Pattern.MatchString(m.GetGroupId()) {
			return WriteRequestValidationError{
				field:  "GroupId",
				reason: "value does not match regex pattern \"[a-zA-Z0-9-_]+\"",
			}
		}

	}

	if m.GetStreamId() != "" {

		if len(m.GetStreamId()) > 84 {
			return WriteRequestValidationError{
				field:  "StreamId",
				reason: "value length must be at most 84 bytes",
			}
		}

		if !_WriteRequest_StreamId_Pattern.MatchString(m.GetStreamId()) {
			return WriteRequestValidationError{
				field:  "StreamId",
				reason: "value does not match regex pattern \"[a-zA-Z0-9-_]+\"",
			}
		}

	}

	if l := len(m.GetEntries()); l < 1 || l > 100 {
		return WriteRequestValidationError{
			field:  "Entries",
			reason: "value must contain between 1 and 100 items, inclusive",
		}
	}

	for idx, item := range m.GetEntries() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return WriteRequestValidationError{
					field:  fmt.Sprintf("Entries[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Internal

	return nil
}

// WriteRequestValidationError is the validation error returned by
// WriteRequest.Validate if the designated constraints aren't met.
type WriteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WriteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WriteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WriteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WriteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WriteRequestValidationError) ErrorName() string { return "WriteRequestValidationError" }

// Error satisfies the builtin error interface
func (e WriteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWriteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WriteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WriteRequestValidationError{}

var _WriteRequest_ServiceId_InLookup = map[string]struct{}{
	"default":    {},
	"containers": {},
	"databases":  {},
}

var _WriteRequest_GroupId_Pattern = regexp.MustCompile("[a-zA-Z0-9-_]+")

var _WriteRequest_StreamId_Pattern = regexp.MustCompile("[a-zA-Z0-9-_]+")

// Validate checks the field values on WriteResponse with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *WriteResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// WriteResponseValidationError is the validation error returned by
// WriteResponse.Validate if the designated constraints aren't met.
type WriteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WriteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WriteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WriteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WriteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WriteResponseValidationError) ErrorName() string { return "WriteResponseValidationError" }

// Error satisfies the builtin error interface
func (e WriteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWriteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WriteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WriteResponseValidationError{}

// Validate checks the field values on LogEntry with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *LogEntry) Validate() error {
	if m == nil {
		return nil
	}

	if t := m.GetTimestamp(); t != nil {
		ts, err := t.AsTime(), t.CheckValid()
		if err != nil {
			return LogEntryValidationError{
				field:  "Timestamp",
				reason: "value is not a valid timestamp",
				cause:  err,
			}
		}

		now := time.Now()
		within := time.Duration(28800*time.Second + 0*time.Nanosecond)

		if ts.Sub(now.Add(within)) >= 0 || ts.Sub(now.Add(-within)) <= 0 {
			return LogEntryValidationError{
				field:  "Timestamp",
				reason: "value must be within 8h0m0s of now",
			}
		}

	}

	if _, ok := _LogEntry_Level_NotInLookup[m.GetLevel()]; ok {
		return LogEntryValidationError{
			field:  "Level",
			reason: "value must not be in list [0]",
		}
	}

	if _, ok := LogEntry_Level_name[int32(m.GetLevel())]; !ok {
		return LogEntryValidationError{
			field:  "Level",
			reason: "value must be one of the defined enum values",
		}
	}

	if len(m.GetMessage()) > 65536 {
		return LogEntryValidationError{
			field:  "Message",
			reason: "value length must be at most 65536 bytes",
		}
	}

	if m.GetJsonPayload() != "" {

		if len(m.GetJsonPayload()) > 65536 {
			return LogEntryValidationError{
				field:  "JsonPayload",
				reason: "value length must be at most 65536 bytes",
			}
		}

	}

	return nil
}

// LogEntryValidationError is the validation error returned by
// LogEntry.Validate if the designated constraints aren't met.
type LogEntryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LogEntryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LogEntryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LogEntryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LogEntryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LogEntryValidationError) ErrorName() string { return "LogEntryValidationError" }

// Error satisfies the builtin error interface
func (e LogEntryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLogEntry.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LogEntryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LogEntryValidationError{}

var _LogEntry_Level_NotInLookup = map[LogEntry_Level]struct{}{
	0: {},
}
